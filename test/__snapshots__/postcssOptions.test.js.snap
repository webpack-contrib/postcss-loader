// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`"postcssOptions" option should throw an error with "syntax" option on the unresolved syntax: errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
TypeError: Cannot read properties of undefined (reading 'parse')",
  "ModuleError: Module Error (from \`replaced original path\`):
Loading PostCSS "unresolved" syntax failed: Cannot find module 'unresolved' from 'src/utils.js'",
]
`;

exports[`"postcssOptions" option should throw an error with "syntax" option on the unresolved syntax: warnings 1`] = `[]`;

exports[`"postcssOptions" option should throw an error with the "config" option on the invalid config: errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: invalid postcss config",
]
`;

exports[`"postcssOptions" option should throw an error with the "config" option on the invalid config: warnings 1`] = `[]`;

exports[`"postcssOptions" option should throw an error with the "config" option on the unresolved config: errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: No PostCSS config found in: /test/fixtures/config-scope/css/unresolve.js",
]
`;

exports[`"postcssOptions" option should throw an error with the "config" option on the unresolved config: warnings 1`] = `[]`;

exports[`"postcssOptions" option should throw an error with the "parser" option on the unresolved parser: errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
TypeError: parser is not a function",
  "ModuleError: Module Error (from \`replaced original path\`):
Loading PostCSS "unresolved" parser failed: Cannot find module 'unresolved' from 'src/utils.js'",
]
`;

exports[`"postcssOptions" option should throw an error with the "parser" option on the unresolved parser: warnings 1`] = `[]`;

exports[`"postcssOptions" option should throw an error with the "plugins" option on the unresolved plugin: errors 1`] = `
[
  "ModuleError: Module Error (from \`replaced original path\`):
Loading PostCSS "postcss-unresolved" plugin failed: Cannot find module 'postcss-unresolved' from 'src/utils.js'",
]
`;

exports[`"postcssOptions" option should throw an error with the "plugins" option on the unresolved plugin: warnings 1`] = `[]`;

exports[`"postcssOptions" option should throw an error with the "stringifier" option on the unresolved stringifier: errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
TypeError: this.stringify is not a function",
  "ModuleError: Module Error (from \`replaced original path\`):
Loading PostCSS "unresolved" stringifier failed: Cannot find module 'unresolved' from 'src/utils.js'",
]
`;

exports[`"postcssOptions" option should throw an error with the "stringifier" option on the unresolved stringifier: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work "Function" value and with "Array" syntax of the "plugins" option: css 1`] = `
"a {
  color: rgba(0, 0, 0, 1.0);
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work "Function" value and with "Array" syntax of the "plugins" option: errors 1`] = `[]`;

exports[`"postcssOptions" option should work "Function" value and with "Array" syntax of the "plugins" option: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work "Function" value and with "Object" syntax of the "plugins" option: css 1`] = `
"a {
  color: rgba(0, 0, 0, 1.0);
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work "Function" value and with "Object" syntax of the "plugins" option: errors 1`] = `[]`;

exports[`"postcssOptions" option should work "Function" value and with "Object" syntax of the "plugins" option: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work "Function" value: css 1`] = `
"a {
  color: rgba(0, 0, 0, 1.0);
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work "Function" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work "Function" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work and don't modify postcss options: css 1`] = `
"a { color: black }

.foo {
  float: right;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyb20uY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksYUFBYTs7QUFFakI7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoidG8uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiYSB7IGNvbG9yOiBibGFjayB9XG5cbi5mb28ge1xuICBmbG9hdDogcmlnaHQ7XG59XG4iXX0= */"
`;

exports[`"postcssOptions" option should work and don't modify postcss options: errors 1`] = `[]`;

exports[`"postcssOptions" option should work and don't modify postcss options: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work and provide API for the configuration: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  border-top-color: blue;
  border-right-color: blue;
  border-left-color: blue;
  background-color: #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work and provide API for the configuration: errors 1`] = `[]`;

exports[`"postcssOptions" option should work and provide API for the configuration: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with "from", "to" and "map" options (absolute paths): css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with "from", "to" and "map" options (absolute paths): errors 1`] = `[]`;

exports[`"postcssOptions" option should work with "from", "to" and "map" options (absolute paths): map 1`] = `undefined`;

exports[`"postcssOptions" option should work with "from", "to" and "map" options (absolute paths): warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with "from", "to" and "map" options (relative paths): css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with "from", "to" and "map" options (relative paths): errors 1`] = `[]`;

exports[`"postcssOptions" option should work with "from", "to" and "map" options (relative paths): map 1`] = `undefined`;

exports[`"postcssOptions" option should work with "from", "to" and "map" options (relative paths): warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options "String" value (relative path): css 1`] = `
"a { color: rgba(0, 0, 0, 1.0) }

.foo {
  float: right;
}
"
`;

exports[`"postcssOptions" option should work with the "config" options "String" value (relative path): errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options "String" value (relative path): warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options and resolve "from" and "to" options: css 1`] = `
"a { color: black }

.foo {
  float: right;
}
"
`;

exports[`"postcssOptions" option should work with the "config" options and resolve "from" and "to" options: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options and resolve "from" and "to" options: source map 1`] = `
{
  "file": "style.css",
  "mappings": "AAAA,IAAI,aAAa;;AAEjB;EACE,YAAY;AACd",
  "names": [],
  "sourceRoot": "",
  "sources": [
    "style.css",
  ],
  "sourcesContent": [
    "a { color: black }

.foo {
  float: right;
}
",
  ],
  "version": 3,
}
`;

exports[`"postcssOptions" option should work with the "config" options and resolve "from" and "to" options: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options and use plugins: css 1`] = `
"a { color: black }

.foo {
  float: right;
}

.bar {
  border-top-color: blue;
  border-right-color: blue;
  border-left-color: blue;
  background-color: #fafafa;
}

@media (prefers-color-scheme: dark) {
  :root:not(.is-light) { /* :root is <html> for HTML documents */
    --text-color: white
  }
  html:not(.is-light) body {
    background: black
  }
}

:root.is-dark { /* :root is <html> for HTML documents */
    --text-color: white
  }

html.is-dark body {
    background: black
  }"
`;

exports[`"postcssOptions" option should work with the "config" options and use plugins: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options and use plugins: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "String" value (absolute path): css 1`] = `
"a { color: rgba(0, 0, 0, 1.0) }

.foo {
  float: right;
}
"
`;

exports[`"postcssOptions" option should work with the "config" options with "String" value (absolute path): errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "String" value (absolute path): warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "String" value (with path to the directory with the configuration): css 1`] = `
"a { color: rgba(0, 0, 0, 1.0) }

.foo {
  float: right;
}
"
`;

exports[`"postcssOptions" option should work with the "config" options with "String" value (with path to the directory with the configuration): errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "String" value (with path to the directory with the configuration): warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "String" value and respect all options: css 1`] = `
"a {
  color: black
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLnNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFO0FBREYiLCJmaWxlIjoic3R5bGUuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiYVxuICBjb2xvcjogYmxhY2tcbiJdfQ== */"
`;

exports[`"postcssOptions" option should work with the "config" options with "String" value and respect all options: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "String" value and respect all options: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "false" value: css 1`] = `
"a { color: black }

.foo {
  float: right;
}
"
`;

exports[`"postcssOptions" option should work with the "config" options with "false" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "false" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "package.json" configuration: css 1`] = `
".import {
  color: red;
}

.test {
  color: blue;
}
"
`;

exports[`"postcssOptions" option should work with the "config" options with "package.json" configuration: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "package.json" configuration: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "true" value: css 1`] = `
"a { color: rgba(0, 0, 0, 1.0) }

.foo {
  float: right;
}
"
`;

exports[`"postcssOptions" option should work with the "config" options with "true" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "config" options with "true" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "map" option and generate inlined source maps: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJzdHlsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJhIHtcbiAgY29sb3I6IGJsYWNrO1xufVxuXG5hIHtcbiAgY29sb3I6IHJlZDtcbn1cblxuYSB7XG4gIGNvbG9yOiBncmVlbjtcbn1cblxuYSB7XG4gIGNvbG9yOiBibHVlO1xufVxuXG4uY2xhc3Mge1xuICAteC1ib3JkZXItY29sb3I6IGJsdWUgYmx1ZSAqO1xuICAteC1jb2xvcjogKiAjZmFmYWZhO1xufVxuXG4uY2xhc3MtZm9vIHtcbiAgLXotYm9yZGVyLWNvbG9yOiBibHVlIGJsdWUgKjtcbiAgLXotY29sb3I6ICogI2ZhZmFmYTtcbn1cblxuLnBob25lIHtcbiAgJl90aXRsZSB7XG4gICAgd2lkdGg6IDUwMHB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICB9XG5cbiAgICBib2R5LmlzX2RhcmsgJiB7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgfVxuICB9XG5cbiAgaW1nIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxufVxuIl19 */"
`;

exports[`"postcssOptions" option should work with the "map" option and generate inlined source maps: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "map" option and generate inlined source maps: map 1`] = `undefined`;

exports[`"postcssOptions" option should work with the "map" option and generate inlined source maps: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "parser" option with "Function" value: css 1`] = `
"a {
  color: black
}
"
`;

exports[`"postcssOptions" option should work with the "parser" option with "Function" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "parser" option with "Function" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "parser" option with "Object" value: css 1`] = `
"a {
  color: black
}
"
`;

exports[`"postcssOptions" option should work with the "parser" option with "Object" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "parser" option with "Object" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "parser" option with "String" value: css 1`] = `
"a {
  color: black
}
"
`;

exports[`"postcssOptions" option should work with the "parser" option with "String" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "parser" option with "String" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value and not throw an error on falsy plugin: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value and not throw an error on falsy plugin: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value and override the previous plugin options: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  border-top-color: blue;
  border-right-color: blue;
  border-left-color: blue;
  background-color: #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value and override the previous plugin options: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value and override the previous plugin options: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value and support disabling plugins from the configuration: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value and support disabling plugins from the configuration: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value and support disabling plugins from the configuration: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value, and config, and override the previous plugin options: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  border-top-color: blue;
  border-right-color: blue;
  border-left-color: blue;
  background-color: #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value, and config, and override the previous plugin options: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value, and config, and override the previous plugin options: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value: css 1`] = `
"a {
  color: rgba(0, 0, 0, 1.0);
}

a {
  color: rgba(255, 0, 0, 1.0);
}

a {
  color: rgba(0, 255, 0, 1.0);
}

a {
  color: rgba(0, 0, 255, 1.0);
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  border-top-color: rgba(0, 0, 255, 1.0);
  border-right-color: rgba(0, 0, 255, 1.0);
  border-left-color: rgba(0, 0, 255, 1.0);
  background-color: #fafafa;
}

.phone_title {
    width: 100px;
  }

@media (max-width: 500px) {

.phone_title {
      width: 100px
  }
    }

body.is_dark .phone_title {
      color: rgba(0, 0, 0, 0);
    }

.phone img {
    display: block;
  }
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Array" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value and only disabled plugins: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value and only disabled plugins: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value and only disabled plugins: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value and override the previous plugin options: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  border-top-color: blue;
  border-right-color: blue;
  border-left-color: blue;
  background-color: #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value and override the previous plugin options: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value and override the previous plugin options: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value and support disabling plugins from the configuration: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value and support disabling plugins from the configuration: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value and support disabling plugins from the configuration: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value, and config, and override the previous plugin options: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  border-top-color: blue;
  border-right-color: blue;
  border-left-color: blue;
  background-color: #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value, and config, and override the previous plugin options: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value, and config, and override the previous plugin options: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: rgba(0, 0, 255, 1.0);
}

.class {
  border-top-color: rgba(0, 0, 255, 1.0);
  border-right-color: rgba(0, 0, 255, 1.0);
  border-left-color: rgba(0, 0, 255, 1.0);
  background-color: #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone_title {
    width: 500px;
  }

@media (max-width: 500px) {

.phone_title {
      width: auto
  }
    }

body.is_dark .phone_title {
      color: white;
    }

.phone img {
    display: block;
  }
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with "Object" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with empty "Array" value: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with empty "Array" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with empty "Array" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with empty "Object" value: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with empty "Object" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with empty "Object" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with the "default" property with options: css 1`] = `
"a {
  color: black;
}

a {
  color: rgba(0, 0, 255, 0.5);
}

a {
  color: green;
}

a {
  color: blue;
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with the "default" property with options: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with the "default" property with options: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with the "default" property without options: css 1`] = `
"a {
  color: black;
}

a {
  color: red;
}

a {
  color: green;
}

a {
  color: rgba(0, 0, 255, 1.0);
}

.class {
  -x-border-color: blue blue *;
  -x-color: * #fafafa;
}

.class-foo {
  -z-border-color: blue blue *;
  -z-color: * #fafafa;
}

.phone {
  &_title {
    width: 500px;

    @media (max-width: 500px) {
      width: auto;
    }

    body.is_dark & {
      color: white;
    }
  }

  img {
    display: block;
  }
}
"
`;

exports[`"postcssOptions" option should work with the "plugins" option with the "default" property without options: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "plugins" option with the "default" property without options: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "stringifier" option with "Function" value: css 1`] = `
"<pre class="midas"><code><span class="midas__selector"><span class="midas__tag">a</span></span> <span class="midas__brace">{</span>
  <span class="midas__property">color</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">black</span></span><span class="midas__semicolon">;</span>
<span class="midas__brace">}</span>

<span class="midas__selector"><span class="midas__tag">a</span></span> <span class="midas__brace">{</span>
  <span class="midas__property">color</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">red</span></span><span class="midas__semicolon">;</span>
<span class="midas__brace">}</span>

<span class="midas__selector"><span class="midas__tag">a</span></span> <span class="midas__brace">{</span>
  <span class="midas__property">color</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">green</span></span><span class="midas__semicolon">;</span>
<span class="midas__brace">}</span>

<span class="midas__selector"><span class="midas__tag">a</span></span> <span class="midas__brace">{</span>
  <span class="midas__property">color</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">blue</span></span><span class="midas__semicolon">;</span>
<span class="midas__brace">}</span>

<span class="midas__selector"><span class="midas__class">.class</span></span> <span class="midas__brace">{</span>
  <span class="midas__property">-x-border-color</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">blue</span> <span class="midas__word">blue</span> <span class="midas__word">*</span></span><span class="midas__semicolon">;</span>
  <span class="midas__property">-x-color</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">*</span> <span class="midas__hex-color">#<span class="midas__hex-value">fafafa</span></span></span><span class="midas__semicolon">;</span>
<span class="midas__brace">}</span>

<span class="midas__selector"><span class="midas__class">.class-foo</span></span> <span class="midas__brace">{</span>
  <span class="midas__property">-z-border-color</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">blue</span> <span class="midas__word">blue</span> <span class="midas__word">*</span></span><span class="midas__semicolon">;</span>
  <span class="midas__property">-z-color</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">*</span> <span class="midas__hex-color">#<span class="midas__hex-value">fafafa</span></span></span><span class="midas__semicolon">;</span>
<span class="midas__brace">}</span>

<span class="midas__selector"><span class="midas__class">.phone</span></span> <span class="midas__brace">{</span>
  <span class="midas__selector">_title</span> <span class="midas__brace">{</span>
    <span class="midas__property">width</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__number">500px</span></span><span class="midas__semicolon">;</span>

    <span class="midas__at-rule"><span class="midas__at-rule-name">@media</span> <span class="midas__function"><span class="midas__parenthesis">(</span><span class="midas__property">max-width</span><span class="midas__colon">: </span><span class="midas__number">500px</span><span class="midas__parenthesis">)</span></span></span> <span class="midas__brace">{</span>
      <span class="midas__property">width</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">auto</span></span><span class="midas__semicolon">;</span>
    <span class="midas__brace">}</span>

    <span class="midas__selector"><span class="midas__tag">body</span><span class="midas__class">.is_dark</span><span class="midas__combinator"> </span></span> <span class="midas__brace">{</span>
      <span class="midas__property">color</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">white</span></span><span class="midas__semicolon">;</span>
    <span class="midas__brace">}</span>
  <span class="midas__brace">}</span>

  <span class="midas__selector"><span class="midas__tag">img</span></span> <span class="midas__brace">{</span>
    <span class="midas__property">display</span><span class="midas__colon">: </span><span class="midas__value"><span class="midas__word">block</span></span><span class="midas__semicolon">;</span>
  <span class="midas__brace">}</span>
<span class="midas__brace">}</span>
</code></pre>"
`;

exports[`"postcssOptions" option should work with the "stringifier" option with "Function" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "stringifier" option with "Function" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "stringifier" option with "Object" value: css 1`] = `
"a
  color: black

a
  color: red

a
  color: green

a
  color: blue

.class
  -x-border-color: blue blue *
  -x-color: * #fafafa

.class-foo
  -z-border-color: blue blue *
  -z-color: * #fafafa

.phone
  &_title
    width: 500px

    @media (max-width: 500px)
      width: auto

    body.is_dark &
      color: white

  img
    display: block
"
`;

exports[`"postcssOptions" option should work with the "stringifier" option with "Object" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "stringifier" option with "Object" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "stringifier" option with "String" value: css 1`] = `
"a
  color: black

a
  color: red

a
  color: green

a
  color: blue

.class
  -x-border-color: blue blue *
  -x-color: * #fafafa

.class-foo
  -z-border-color: blue blue *
  -z-color: * #fafafa

.phone
  &_title
    width: 500px

    @media (max-width: 500px)
      width: auto

    body.is_dark &
      color: white

  img
    display: block
"
`;

exports[`"postcssOptions" option should work with the "stringifier" option with "String" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "stringifier" option with "String" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "syntax" option with "Object" value: css 1`] = `
"a
  color: black
"
`;

exports[`"postcssOptions" option should work with the "syntax" option with "Object" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "syntax" option with "Object" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work with the "syntax" option with "String" value: css 1`] = `
"a
  color: black
"
`;

exports[`"postcssOptions" option should work with the "syntax" option with "String" value: errors 1`] = `[]`;

exports[`"postcssOptions" option should work with the "syntax" option with "String" value: warnings 1`] = `[]`;

exports[`"postcssOptions" option should work without the specified values in the "postcssOptions" option: css 1`] = `
"a { color: rgba(0, 0, 0, 1.0) }

.foo {
  float: right;
}
"
`;

exports[`"postcssOptions" option should work without the specified values in the "postcssOptions" option: errors 1`] = `[]`;

exports[`"postcssOptions" option should work without the specified values in the "postcssOptions" option: warnings 1`] = `[]`;
